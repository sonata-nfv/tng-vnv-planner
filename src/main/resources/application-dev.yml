# Copyright (c) 2015 SONATA-NFV, 2017 5GTANGO [, ANY ADDITIONAL AFFILIATION]
# ALL RIGHTS RESERVED.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Neither the name of the SONATA-NFV, 5GTANGO [, ANY ADDITIONAL AFFILIATION]
# nor the names of its contributors may be used to endorse or promote
# products derived from this software without specific prior written
# permission.
#
# This work has been performed in the framework of the SONATA project,
# funded by the European Commission under Grant number 671517 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the SONATA
# partner consortium (www.sonata-nfv.eu).
#
# This work has been performed in the framework of the 5GTANGO project,
# funded by the European Commission under Grant number 761493 through
# the Horizon 2020 and 5G-PPP programmes. The authors would like to
# acknowledge the contributions of their colleagues of the 5GTANGO
# partner consortium (www.5gtango.eu).

server:
  port: 6100
  contextPath: /tng-vnv-planner
spring:
  jackson.property-naming-strategy: SNAKE_CASE
api:
  name: tng-vnv-planner
  description: An H2020 5GTANGO project
  version: 0.0.1
  host: tng-vnv-planner:6100
  terms.url: https://5gtango.eu/
  license:
    name: Apache License 2.0
    url: https://github.com/sonata-nfv/tng-vnv-planner/blob/master/LICENSE
app:
  gk:
    host: gk
    base.url: http://qual-sp-bcn.5gtango.eu:32002/api/v3
    session:
      endpoint: ${app.gk.base.url}/sessions
      username: sonata
      password: 1234
    service.list.endpoint: ${app.gk.base.url}/services
    service.list.by.tag.endpoint: ${app.gk.base.url}/services
    package.list.endpoint: ${app.gk.base.url}/packages
    service.metadata.endpoint: ${app.gk.base.url}/services/{uuid}
    package.metadata.endpoint: ${app.gk.base.url}/packages/{packageId}
  vnvgk:
    host: tng-api-gtw
    base.url: http://${app.vnvgk.host}:5000/api/v3
    test.list.endpoint: ${app.vnvgk.base.url}/tests/descriptors
    test.list.by.tag.endpoint: ${app.vnvgk.base.url}/tests/descriptors
    test.metadata.endpoint: ${app.vnvgk.base.url}/tests/descriptors/{uuid}
  cat:
    host: tng-cat
    base.url: http://${app.cat.host}:4011/api/catalogues/v2

  tpr:
    host: tng-rep
    base.url: http://${app.tpr.host}:4012/trr
    test.plan.create.endpoint: ${app.tpr.base.url}/test-plans
    test.plan.update.endpoint: ${app.tpr.base.url}/test-plans/{uuid}

  curator:
    host: tng-vnv-curator
    base.url: http://${app.curator.host}:6200/api/v1
    test.plan.curate.endpoint: ${app.curator.base.url}/test-preparations
    cancel.test.plan.curate.endpoint: ${app.curator.base.url}/test-preparations/{uuid}

  queue.capacity: 500
  pool:
    size:
      core: 10
      max: 20

# STATIC MESSAGES:
  NOT_MATCHING_TEST_TAGS: '[NOT MATCHING TEST TAGS]'
  NOT_AVAILABLE_DATA: '[NOT AVAILABLE DATA]'

# ===============================
# = DATA SOURCE
# ===============================

## ===============================
## = Postgresql
## ===============================
## Set here configurations for the database connection
spring.datasource.url: jdbc:postgresql://10.0.2.123:5432/
spring.datasource.username: tango
spring.datasource.password: tango
spring.datasource.db: tng-planner
spring.datasource.driver: org.postgresql.Driver
## Keep the connection alive if idle for a long time (needed in production)
#spring.datasource.testWhileIdle: true
#spring.datasource.validationQuery: SELECT 1
#
## ===============================
## = JPA / HIBERNATE
## ===============================
spring.jpa.properties.hibernate.dialect: org.hibernate.dialect.PostgreSQLDialect
spring.jpa.generate_statistics: false
spring.jpa.bytecode.use_reflection_optimizer: true
spring.jpa.connection.release_mode: on_close
spring.jpa.format_sql: true
spring.jpa.show-sql: true
spring.jpa.hibernate.ddl-auto: create-drop
#
## Naming strategy
spring.jpa.hibernate.naming.implicit-strategy: org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
#spring.jpa.hibernate.naming.physical-strategy: org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
